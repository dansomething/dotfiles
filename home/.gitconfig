[alias]
  b = branch

  # View abbreviated SHA, description, and history graph of the latest 20 commits.
  ld = log --pretty=oneline -n 20 --graph --abbrev-commit
  l = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit

  # View the current working tree status using the short format.
  s = status -s
  sl = stash list
  ss = stash save
  so = stash show
  sp = !sh -c 'git stash show -p stash@{$1}' -
  sa = !sh -c 'git stash apply stash@{$1}' -
  sd = !sh -c 'git stash drop stash@{$1}' -

  # Show the diff between the latest commit and the current state.
  d = !"git diff-index --quiet HEAD -- || clear; git diff --patch-with-stat"
  dt = difftool

  # `git di $number` shows the diff between the state `$number` revisions ago and the current state.
  di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

  mt = mergetool

  # Pull in remote changes for the current repository and all its submodules.
  um = !"git pull; git submodule foreach git pull origin $(git rev-parse --abbrev-ref origin/HEAD)"

  # Prune branches removed from remote and update fast-forward only
  u = "!git remote update -p; git merge --ff-only @{u}"

  # rebase pull, auto prune remote branches, and list pulled commits
  urb = !sh -c 'git pull --rebase --prune && git log --pretty=format:\"%Cred%ae %Creset- %C(yellow)%s %Creset(%ar)\" HEAD@{1}..'

  p = !"git push"

  # Clone a repository including all submodules.
  c = clone --recursive

  # Commit all changes
  ca = !git add -A && git commit -av
  ci = commit

  # Switch to a branch, creating it if necessary.
  go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"
  co = checkout

  # Show verbose output about tags, branches or remotes
  tags = tag -l
  branches = branch -a
  remotes = remote -v

  # List aliases.
  aliases = config --get-regexp alias

  # Amend the currently staged files to the latest commit.
  amend = commit --amend --reuse-message=HEAD

  # Remove branches that have already been merged.
  # list merged
  m = "!git branch --merged | grep -v '\\*'"
  mr = "!git branch --remotes --merged | grep -v $(git rev-parse --abbrev-ref origin/HEAD) | cut -d / -f 2-"
  # a.k.a. ‘delete merged’
  dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"
  dmr = "!git branch --remotes --merged | grep -v $(git rev-parse --abbrev-ref origin/HEAD) | cut -d / -f 2- | xargs -n 1 git push origin --delete"

  # Credit an author on the latest commit.
  credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

  # https://jordanelver.co.uk/blog/2020/06/04/fixing-commits-with-git-commit-fixup-and-git-rebase-autosquash/
  fixup = "!git log -n 50 --pretty=format:'%h %s' --no-merges | fzf | cut -c -7 | xargs -o git commit --fixup"

  # Interactive rebase with the given number of latest commits.
  reb = "!r() { git rebase -i HEAD~$1; }; r"

  # Find branches containing commit
  fb = "!f() { git branch -a --contains $1; }; f"

  # Find tags containing commit
  ft = "!f() { git describe --always --contains $1; }; f"

  # Find commits by source code
  fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

  # Find commits by commit message
  fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

  # Find deleted commits by source code
  fd = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -c -S$1 }; f"

  # Clean with out removing my local config files
  xclean = clean -fdx -e .vimrc -e Session.vim -e .ctagsignore -e .agignore -e .settings -e .project -e .classpath -e rebel.xml
  nxclean = clean -nfdx -e .vimrc -e Session.vim -e .ctagsignore -e .agignore -e .settings -e .project -e .classpath -e rebel.xml
  oldest-ancestor = !bash -c 'diff --old-line-format= --new-line-format= <(git rev-list --first-parent \"${1:-main}\") <(git rev-list --first-parent \"${2:-HEAD}\") | head -1' -

  cpr = !hub pull-request -a dansomething

  # Prune stale local tags. https://demisx.github.io/git/2014/11/02/git-prune-local-tags-dont-exist-remote.html
  pt = !git tag -l | xargs git tag -d && git fetch -t

  patch = !git --no-pager diff --no-color

  # List contributors with number of commits.
  contributors = shortlog --summary --numbered

  # Show the user email for the current repository.
  whoami = config user.email

[apply]
  whitespace = warn

[core]
  # Use custom `.gitignore` and `.gitattributes`
  excludesfile = ~/.gitignore_global
  #attributesfile = ~/.gitattributes_global
  autocrlf = input
  # Treat spaces before tabs, lines that are indented with 4 or more spaces, and all kinds of trailing whitespace as an error
  whitespace = space-before-tab,trailing-space,tabwidth=4
  pager = delta

[delta]
  navigate = true
  side-by-side = true

[diff]
  tool = vimdiff
  colorMoved = default
  compactionHeuristic = true

[difftool]
  prompt = false

[github]
  user = dansomething

[ghi]
  token = !security find-internet-password -a dansomething -s github.com -l 'ghi token' -w

[init]
  defaultBranch = main

[interactive]
  diffFilter = delta --color-only

[merge]
  # Include summaries of merged commits in newly created merge commit messages
  log = true
  tool = diffconflicts

[mergetool]
  keepBackup = false

[mergetool "diffconflicts"]
  cmd = vim -c DiffConflicts \"$MERGED\" \"$BASE\" \"$LOCAL\" \"$REMOTE\"
  trustExitCode = true

[push]
  default = simple

[rebase]
  autoStash = true

# URL shorthands
[url "git@github.com:"]
  insteadOf = "gh:"
  pushInsteadOf = "github:"
  pushInsteadOf = "git://github.com/"

[url "git://github.com/"]

  insteadOf = "github:"

[url "git@gist.github.com:"]

  insteadOf = "gst:"
  pushInsteadOf = "gist:"
  pushInsteadOf = "git://gist.github.com/"

[url "git://gist.github.com/"]

  insteadOf = "gist:"

[user]
  name = Dan Hansen
  email = hansendanr+git@gmail.com
