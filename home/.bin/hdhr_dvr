#!/usr/bin/env bash
set -eou pipefail

NAME=$(date +"%Y-%m-%dT%H%M")
DURATION=".5" # hours
OUT_PATH="."
TRANSCODE="heavy"
CHANNEL=""
HOSTNAME=""
PORT="5004"

#/ Usage: hdhr_dvr [-h] [-n] [-d] [-o] -c
#/
#/ Create a TV channel recording using HDHomeRun.
#/
#/ Available Options:
#/   -h, --help      : Display this help message
#/   -v, --verbose   : Print script debug info.
#/   -H, --hostname  : The required hostname or IP of the HDHomeRun device.
#/   -p, --port      : The optional port of the HDHomeRun device. Default: 5004
#/   -c, --channel   : The required channel to record on.
#/   -n, --name      : The optional name of the recording. Default: current datetime
#/   -d, --duration  : The optional duration of the recording in hours. Default: 30
#/   -o, --outpath   : The optional output destination directory. Default: .
#/   -t, --transcode : The optional transcode level (heavy, mobile, internet720). Default: heavy
usage() { grep '^#/' "$0" | cut -c4- ; exit 0 ; }

log()   { printf "%s\n" "$*" >&2 ; }
info()  { log "[INFO] $*" ; }
warn()  { log "[WARNING] $*" ; }
error() { log "[ERROR] $*" ; }
fatal() { log "[FATAL] $*" ; exit 1 ; }

parse_params() {
  while :; do
    case "${1-}" in
    -h | --help) usage ;;
    -v | --verbose) set -x ;;
    -H | --hostname)
      HOSTNAME="${2-}"
      shift
      ;;
    -p | --port)
      PORT="${2-}"
      shift
      ;;
    -c | --channel)
      CHANNEL="${2-}"
      shift
      ;;
    -n | --name)
      NAME="${NAME}_${2-}"
      shift
      ;;
    -d | --duration)
      DURATION="${2-}"
      shift
      ;;
    -o | --outpath)
      OUT_PATH="${2-}"
      shift
      ;;
    -t | --transcode)
      TRANSCODE="${2-}"
      shift
      ;;
    -?*) fatal "Unknown option: ${1}" ;;
    *) break ;;
    esac
    shift
  done

  if [ -z "${CHANNEL}" ]; then
    fatal "Please specify a channel with -c"
  fi
  if [ -z "${HOSTNAME}" ]; then
    fatal "Please specify a hostname or IP address with -H"
  fi
  if [ ! -d "${OUT_PATH}" ]; then
    fatal "The output directory '-o ${OUT_PATH}' doesn't exist. Please create it."
  fi

  return 0
}

main() {
  parse_params "$@"

  dur=$(echo "${DURATION} * 60 * 60" | bc -l)
  dur=${dur%.*}
  file="${OUT_PATH}/${NAME}.mpg"

  r=$(curl -s \
    --connect-timeout 10 \
    -w "%{http_code}" \
    -o "${file}" \
    "http://${HOSTNAME}:${PORT}/auto/v${CHANNEL}?transcode=${TRANSCODE}&duration=${dur}")

  if [ "${r}" -ge 200 ] && [ "${r}" -lt 300 ]; then
    info "Recording saved to: ${file}"
  elif [ "${r}" -ge 400 ] && [ "${r}" -lt 500 ]; then
    error "Recording failed. There was a client error: ${r}"
  else
    fatal "Recording failed. There was a server error: ${r}"
  fi
}

main "$@"
